<section id="avoidoverdraw">
	<title>Analyzing Overdraw
	
		_Overdraw_
		happens if you draw something on top of something else. For
		example an
		_activity_
		has a
		`Window`
		as background. If a
		`TextView`
		it added to the application, the
		`TextView`
		is drawn on top of the
		`Window`
		.
	
	Overdrawn is therefore intended to happen. But unnecessary
		overdraw should be avoid to have the best performance possible.
	
	Unnecessary
		overdraw can be caused by complex view hierarchies. In
		general a 2x overdraw (a pixel gets drawn three times) is standard and
		expected but
		more should be
		avoided.
	
	
		You can enable a visualization of overdraw via the
		<guilabel>Development
			Settings
		</guilabel>
		with the
		<guilabel>Show GPU overdraw</guilabel>
		setting. This section adds colors to your screen based on the number
		of overdraws. The following table explains the used color schema.
	
	
		<table frame='all'>
			<title>Overdrawn colors
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
				<colspec colname='c1' />
				<colspec colname='c2' />
				<thead>
					<row>
						<entry>Color </entry>
						<entry>Meaning</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>No color</entry>
						<entry>No overdraw</entry>
					</row>
					<row>
						<entry>Blue</entry>
						<entry>1x overdraw, pixel was painted twice</entry>
					</row>
					<row>
						<entry>Green</entry>
						<entry>2x</entry>
					</row>
					<row>
						<entry>Light red</entry>
						<entry>3x, might indicate a problem, small red areas are still ok
						</entry>
					</row>
					<row>
						<entry>Dark red</entry>
						<entry>4x, pixel was pained 5 times or more, indicates a problem.
						</entry>
					</row>

				</tbody>
			</tgroup>
		</table>
	
	
		After visualization of potential problematic areas, you can
		analyze
		your
		`View`
		hierarchy with the
		<guilabel>Hierarchy Viewer</guilabel>.
	
</section>
<section id="tutorial_library" role="wrapper">
	<title>Exercise: Create Android library module
	<section id="tutorial_library_target">
		<title>Target
		
			Our library project will not contribute Android components but a
			data
			model and a method to get the number of
			instances. The library
			provides access to (fake) RSS data. An
			_RSS_
			document is an XML file which can be used to publish blog
			entries and
			news. The format of the XML
			file
			is specified via
			the RSS
			specification.
		
		
			Our library project will not contribute Android components but a
			data model and a method to get the number of
			instances. We will
			provide RSS-feed data. The following gives a short introduction into
			RSS.
		
	

	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../RSSFeed/content/010_overview.xml" />

	<section id="tutorial_library_project_studio">
		<title>Create library module
		
			For Android Studio each library is a module. To create a new library
			module in Android Studio, select
			<menuchoice>
				<guimenu>File</guimenu>
				<guisubmenu>New Module</guisubmenu>
			</menuchoice>
			and select
			<guilabel>Android Library</guilabel>
			.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/library_studio08.png"/>
				</imageobject>
				<textobject>
					<phrase>Selection for creating a library project</phrase>
				</textobject>
			</mediaobject>
		
		
			Use
			_com.example.android.rssfeedlibrary_
			as module name and
			_Rssfeed Library_
			as library name.
		

		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/library_studio10.png"/>
				</imageobject>
				<textobject>
					<phrase>Setting the library property</phrase>
				</textobject>
			</mediaobject>
		
		If prompted for a template select that no activity should be created. 
		As a result Android Studio shows another module.
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/library_studio24.png"/>
				</imageobject>
				<textobject>
					<phrase>Setting the library property</phrase>
				</textobject>
			</mediaobject>
		
	

	<section id="rssfeedreaders_objectxmlparserlistview">
		<title>Create the model class
		
			Create an
			`RssItem`
			class which can store data of an RSS entry.
		
		
			Generate the getters and setter, the constructor and a
			`toString()`
			method. The result should look like the following class:
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/net/RssItem.java" />
			</programlisting>
		
	

	<section id="rssfeedreaders_example">
		<title>Create instances
		
			Create a new class called
			`RssFeedProvider`
			with a static method to return a list of
			`RssItem`
			objects. This method does currently only return
			test data.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/net/RssFeedProvider.java" />
			</programlisting>
		
	

	<section id="tutorial_library_usage_studio">
		<title>Define dependency to the library project
		
		
			To use the library add it as a dependency in your project select
			<menuchoice>
				<guimenu>File</guimenu>
				<guisubmenu>Project Structure</guisubmenu>
			</menuchoice>
			. Select the
			_app_
			entry. Switch to the
			<guilabel>Dependencies</guilabel>
			tab and select
			<guilabel>Module dependencies</guilabel>
			via the + sign.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/library_studio30.png"/>
				</imageobject>
				<textobject>
					<phrase>Define dependency in Android Studio - Selecting dependency</phrase>
				</textobject>
			</mediaobject>
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/library_studio40.png"/>
				</imageobject>
				<textobject>
					<phrase>Define dependency in Android Studio - Select module</phrase>
				</textobject>
			</mediaobject>
		

		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/library_studio50.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>Define dependency in Android Studio - Select module</phrase>
				</textobject>
			</mediaobject>
		
	

	<section id="tutorial_library_useinproject">
		<title>Use library project to update detailed fragments
		
			Use the static method of
			`RssFeedProvider`
			to get the list of
			`RssItem`
			objects and display the number in your
			`DetailFragment`
			instead of current system time.
		
		
			To send the new data, change the
			`updateDetail`
			method in your
			`MyListFragment`
			class.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/net/AccessLibrary.java" />
			</programlisting>
		
	

	<section id="tutorial_library_validate">
		<title>Validate implementation
		
			Start your application and ensure that the
			`toString`
			value of the (at the moment randomly generated) list of
			RssItems is displayed in
			the
			detailed fragment.
		
	



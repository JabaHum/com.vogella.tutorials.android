<section id="dialogfragment" role="wrapper">
	<title>Using dialogs in Android with DialogFragments
	<section id="dialogfragment_overview">
		<title>Using dialogs in Android
		
			In the past you could open dialogs from your
			activity
			via the
			`showDialog(int)`
			method but since the introduction of fragments which method has been deprecated.
			You should use an instance of
			`DialogFragment`
			to show a dialog. A DialogFragment is a fragment that displays a dialog window, floating on top of its activityâ€™s
			window. You can either
			return an existing dialog implementation in your fragment or implement a custom layout to be
			shown.
		
	

	<section id="dialogfragment_wrappingdialog">
		<title>Using existing dialogs
		
			Your
			`DialogFragment`
			can implement the
			`onCreateDialog`
			method and return an existing dialog.
			The
			`Dialog`
			class
			is the base class for implementing a dialog. Typically, you use one of its
			subclasses, e.g.,
			`AlertDialog`
			,
			`ProgressDialog`
			,
			`DatePickerDialog`
			or
			`TimePickerDialog`
			.
		
		
			Android also provides a
			`ProgressDialog`
			,
			which can be opened via a
			`ProgressDialog.open()`
			method call.
		
	

	<section id="dialogfragment_customlayout">
		<title>Custom layout for your DialogFragment

		
			If you want to create your custom dialog, you create a layout file
			for
			the dialog. This layout file can be inflated and
			returns via the
			`onCreateView()`
			method of the fragment.
		
	
	<section id="dialog_owndialog">
		<title>Communication to the activity via the DialogFragment

		
			Your implementation of
			`DialogFragment`
			communicates similar to other fragment to the activity. A good practice is that the fragment defines an
			interface
			which the activity must implement so that the fragment can call back into the activity without knowing the
			implementation
			details of the activity.

		
	

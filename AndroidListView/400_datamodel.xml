<section id="listviewselection">
== Selecting multiple items in the ListView
	<section id="listviewselection_data">
=== Interaction between the model and Listview
		
			Frequently you need to select items in your
			`ListView`
			. As the row of the
			`ListView`
			are getting recycled you cannot store the selection on the
			`View`
			level.
		
		
image::interactive10.png[]
				
				<textobject>
					<phrase>ListView with Interaction and full model</phrase>
				</textobject>
			
		
		Selection is just one possible example but you can imange other
			interaction between your row and model.
		
		To persist the selection you have to update your data model with
			the selected state.
		
		
			To update the data model in your
			`ListView`
			you define your own
			`Adapter`
			class. In this adapter class you attach a listener to the
			`View`
			which is responsible for selecting the model element. If selected you
			update the state in the model which you can add
			as a tag to the View
			to have access to it.
		
		
			The following example demonstrates how to use standard Java
			object
			and
			how to interact from the
			`Views`
			with the model.
		

	


	<section id="listadvanced_interactive">
=== Tutorial: Domain Model and list view rows interaction
		
			Continue to use the
			`de.vogella.android.listactivity`
			project.
		
		

			Create the following
			`Model`
			which hold the name and the information if this element is
			currently
			selected.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/interactive/Model.java[]
----
		
		
			Create the following new layout file called
			_rowbuttonlayout.xml_
			.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/interactive/rowbuttonlayout.xml[]
----
		

		
			Create the following
			`Adapter`
			. This adapter adds a listener
			on the
			`Checkbox`
			view
			. If the checkbox
			is selected the underlying data of
			the model is
			changed.
			`Checkbox`
			gets the corresponding model element
			assigned via the
			`getTag()`
			method.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/interactive/InteractiveArrayAdapter.java[]
----
		
		
			Finally change your
			activity
			to the following.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/interactive/MyList.java[]
----
		
		 If you start your app you should be able to flag items. These
			changes will be reflected in your model.
		

	




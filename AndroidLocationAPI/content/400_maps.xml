<section id="maps">
	<title>Google Maps</title>
	<section id="maps_mapsview">
		<title>MapsView</title>
		<para>
			Google provides via the
			<code>com.google.android.maps</code>
			package a library for using the
			<code>MapView</code>
			class
			in your application. This view allows to embed Google Maps into
			your application.
		</para>
		<para>
			You require an additional key to use them.
			This
			key will be specified
			in the layout file
			for the
			<code>MapView</code>
			.
		</para>
		<para>
			You need to add the
			information that you will be using the
			<code>map</code>
			library to your
			<filename>AndroidManifest.xml</filename>
			file
			The Android
			project creation wizard in Eclipse does this
			automatically, if
			you select a
			Google
			API version.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/maps/uses.txt" />
			</programlisting>
		</para>
		<para>
			The usage of
			<code>MapView</code>
			requires the permission to access
			the Internet, as the data displayed
			in the
			<code>MapView</code>
			is downloaded from the Internet.
		</para>
	</section>
	<section id="maps_activity">
		<title>MapsActivity</title>
		<para>
			The
			<code>MapActivity</code>
			class
			extends the
			<wordasword>activity</wordasword>
			class and provides the
			life cycle management and the services for
			displaying a
			<code>MapView</code>
			widget.
		</para>

		<para>
			MapActivity simplify the handling
			<code>MapViews</code>
			similar to
			<code>ListActivity</code>
			simplifies the usage of
			<code>ListViews</code>
			.
		</para>
		<para>
			A
			<code>MapView</code>
			is typically defined in the XML layout file used by the
			<code>MapActivity</code>
			and requires the API key in the "android:apiKey" attribute. A
			<code>MapView</code>
			can be used with other user interface components in the same layout.
		</para>
		<para>
			The
			<code>MapController</code>
			class can be used to interact with the
			<code>MapView</code>
			, e.g. by moving it. A
			<code>Geopoint</code>
			is a position described via
			latitude
			and longitude.
		</para>

	</section>
	<section id="maps_zoomcontrols">
		<title>Build in Zoom controls</title>
		<para>
			<code>MapView</code>
			allows to activate the build in zoom controls via the
			<code>.setBuiltInZoomControls()</code>
			method call.
		</para>

	</section>
	<section id="maps_mylocation">
		<title>MyLocationOverlay</title>
		<para>
			The
			<code>MyLocationOverlay</code>
			class allow to display the current geolocation and allows to enable a
			compass.
		</para>

		<para>
			The following code snippet shows how you can register
			myLocationOverlay for your
			<code>MapView</code>
			.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/maps/mylocation.txt" />
			</programlisting>
		</para>

		<para>
			You also have a enable and disable myLocationOverview and the compass
			in the
			<code>onResume()</code>
			method and in the
			<code>onPause()</code>
			method.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/maps/lifecycle.txt" />
			</programlisting>
		</para>

	</section>




	<section id="maps_overlays">
		<title>ItemizedOverlay and OverlayItems</title>
		<para>
			You can put instances of the
			<code>Overlay</code>
			class
			on the map.
			<code>Overlay</code>
			is the base class representing an overlay which may be displayed
			on
			top of a map. To add an overlay, subclass this class, create an
			instance, and add it to the list obtained from MapView.getOverlays().
		</para>
		<code>ItemizedOverlay</code>
		is the base class for an
		<code>Overlay</code>
		which consists of a list of
		<code>OverlayItems</code>
		.
		<code>ItemizedOverlay</code>
		handles sorting north-to-south for drawing, creating span
		bounds,
		drawing a marker for each point, and maintaining a focused
		item. It
		also matches screen-taps to items, and dispatches
		Focus-change events
		to an optional listener.
	</section>

	<section id="maps_key">
		<title>Getting the Google Map key</title>
		<para>
			To use Google Maps you need to create a valid key. This is based
			on the
			key with which you sign your Android application during
			deployment. If you develop with Eclipse, Eclipse automatically
			creates
			and uses a debug key based on the
			"userhome"/.android/debug.keystore
			file.
		</para>
		<para>To create the key you use the "keytool" command from your JDK
			installation pointing to the "debug.keystore" file.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/maps/key.txt" />
			</programlisting>
		</para>
		<para>
			If you are using Java7 the default output of keytool has changed. Add
			the
			<parameter class='option'>-v</parameter>
			to see also the MD5 fingerprint.
		</para>

		<para>
			The output of this command must be copied and entered on the
			following
			website:
			<ulink url="http://code.google.com/android/maps-api-signup.html"> Google Maps Signup Page</ulink>
			.
		</para>

		<para>
			The procedure is described in detail in the following link:
			<ulink
				url="http://code.google.com/android/add-ons/google-apis/mapkey.html">Getting a Google Maps key</ulink>
			.
		</para>
	</section>


	<section id="maps_device">
		<title>Device with Google API</title>
		<para>
			In case you want to use Google Maps in your emulator you have to
			create a device which supports the Google API's. This
			requires
			that
			you
			also install the "Google API". During
			device creation select the
			target
			Google API's in the
			version of your
			SDK.
		</para>

		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/location04.gif" scale="60" />
				</imageobject>
			</mediaobject>
		</para>


	</section>




</section>


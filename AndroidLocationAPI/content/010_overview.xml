<section id="locationapi">
	<title>Android Location API
	<section id="locationapi_overview">
		<title>Determine the current geolocation
		
			Most
			Android
			devices allow to determine the current geolocation.
			This
			can be done
			via a GPS (Global
			Positioning
			System)
			module, via cell
			tower
			triangulation or via wifi networks.
		
		
			Android contains the
			`android.location`
			package which provides
			the
			API to
			determine the
			current geo
			position.
		
	
	<section id="locationapi_locationmanager">
		<title>LocationManager
		
			The
			`LocationManager`
			class
			provides access to the Android location
			service. This services
			allows
			to access location providers, to register location update
			listeners
			and proximity alerts and more.
		
	
	<section id="locationapi_locationprovider">
		<title>LocationProvider
		
			The
			`LocationProvider`
			class
			is the superclass of the different location providers
			which
			deliver the
			information about the current location. This information
			is stored in the
			`Location`
			class.
		


		
			The Android device might have several
			`LocationProvider`
			available
			and you can
			select which one you want to use. In most cases
			you have the
			followng
			`LocationProvider`
			available.
		
		
			<table frame='all'>
				<title>LocationProvider
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="1*"/>
					<colspec colname='c2' colwidth="3*"/>
					<thead>
						<row>
							<entry>LocationProvider</entry>
							<entry>Description</entry>
						</row>
					</thead>

					<tbody>
						<row>
							<entry>network</entry>
							<entry>Uses the mobile network or WI-Fi to determine the best
								location. Might have a higher precision in closed rooms then
								GPS.
							</entry>
						</row>
						<row>
							<entry>gps</entry>
							<entry>Use the GPS receiver in the Android device to determine
								the best
								location via satellites. Usually better precision than
								network.
							</entry>
						</row>
						<row>
							<entry>passive</entry>
							<entry>Allows to participate in location of updates of other
								components to save energy
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		
	
	<section id="locationapi_criteria">
		<title>Selecting LocationProvider via Criteria
		
			For a flexible selection of
			the best location
			provider use a
			`Criteria`
			object, in which you can define how the provider should be
			selected.
		
		
			You can register a
			`LocationListener`
			object with the
			`LocationManager`
			class to receive periodic updates about the geoposition.
		
	
	<section id="locationapi_proximity">
		<title>Proximity Alert
		
			You can also register an
			`Intent`
			which allows to define a proximity alert, this alert will be
			triggered if the device enters a area given by a longitude,
			latitude
			and radius (proximity alert).
		
	

	<section id="locationapi_geocoding">
		<title>Forward and reverse Geocoding
		
			The
			`Geocoder`
			class allows to determine the geo-coordinates
			(longitude, laditude)
			for a given address and possible addresses for
			given geo-coordinates.
		
		
			This process is known as forward and reverse
			geocoding. The
			`Geocoder`
			class uses an online Google service.
		
	
	<section id="locationapi_security">
		<title>Security
		
			If you want to access the GPS sensor, you need the
			`ACCESS_FINE_LOCATION`
			permission. Otherwise you need the
			`ACCESS_COARSE_LOCATION`
			permission.
		

	

	<section id="checklocationapi">
		<title>Prompt the user to Enabled GPS
		The user can decide if the GPS is enabled or not. 
		
			You can find out, if a LocationManager is enabled via the
			`isProviderEnabled()`
			method. If its not enabled you can send the user to the settings via
			an
			`Intent`
			with the
			`Settings.ACTION_LOCATION_SOURCE_SETTINGS`
			action for the
			`android.provider.Settings`
			class.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/snippets/checknetwork.java" />
			</programlisting>
		
		
			Typically you would open an
			`AlarmDialog`
			prompt the user
			and if he wants to enable GPS or if the application
			should be canceled.
		


		You cannot enable the GPS directly in your code, the user has to
			do this.
		

	


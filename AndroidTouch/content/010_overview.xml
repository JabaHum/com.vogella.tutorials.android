<section id="touch" role="wrapper">
	<title>Android Touch
	<section id="touch_overview">
		<title>Android touch basics
		
			The Android
			standard
			`View`
			class
			support touch events. You can react to touch events in your
			custom views and your
			activities. Android supports multiple pointers,
			e.g. fingers which are interacting with the screen.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/androidtouch10.png"/>
				</imageobject>
				<textobject>
					<phrase>Android touch</phrase>
				</textobject>
			</mediaobject>
		

		
			The base class for touch support is the
			`MotionEvent`
			class which is passed to
			`Views`
			via the
			`onTouchEvent()`
			method.

			To react to
			touch
			events

			you override the
			`onTouchEvent()`
			method.
		
		
			The
			`MotionEvent`
			class
			contains the touch related information, e.g., the number of
			pointers, the X/Y coordinates and size and pressure of each pointer.
		
		
			This method returns
			`true`
			if the touch event has been handled by the view. Android tries to
			find the deepest view which returns true to handles the touch event.
			If the view is part of another view (parent view), the parent can
			claim the event by returning
			`true`
			from the
			`onInterceptTouchEvent()`
			method. This would send an
			`MotionEvent.ACTION_CANCEL`
			event to the view which received previously the touch events.
		


		
			To react to touch events in an
			activity,
			register an
			`OnTouchListener`
			for the relevant
			`Views`
			.
		
	
	<section id="touch_single">
		<title>Single touch
		
			If single
			input is used you can
			use the

			`getX()`
			and
			`getY()`
			methods to get the current position of the first finger.
		
		
			Via the
			`getAction()`
			method
			you receive the action which was performed. The
			`MotionEvent`
			class provides the following constants to determine the action which
			was performed.

			<table frame='all'>
				<title>Touch Events
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					<thead>
						<row>
							<entry>Event</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>MotionEvent.ACTION_DOWN</entry>
							<entry>New touch started</entry>
						</row>
						<row>
							<entry>MotionEvent.ACTION_MOVE</entry>
							<entry>Finger is moving</entry>
						</row>
						<row>
							<entry>MotionEvent.ACTION_UP</entry>
							<entry>Finger went up</entry>
						</row>
						<row>
							<entry>MotionEvent.ACTION_CANCEL</entry>
							<entry>Current event has been canceled, something else took
								control of the touch event
							</entry>
						</row>
						<row>
							<entry>MotionEvent.ACTION_POINTER_DOWN</entry>
							<entry>Pointer down (multi-touch)</entry>
						</row>
						<row>
							<entry>MotionEvent.ACTION_POINTER_UP</entry>
							<entry>Pointer up (multi-touch)</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		


	
	<section id="touch_multi">
		<title>Multi touch

		
			Multi-touch is available since
			Android 2.0 and has been improved
			in the version 2.2. This description uses the API as of version 2.2.
		

		
			The
			`MotionEvent.ACTION_POINTER_DOWN`
			and
			`MotionEvent.ACTION_POINTER_UP`
			are send starting with the second finger. For the first finger
			`MotionEvent.ACTION_DOWN`
			and
			`MotionEvent.ACTION_UP`
			are used.
		
		
			The
			`getPointerCount()`
			method on
			`MotionEvent`
			allows you to determine the number of pointers on the device. All
			events and the position of the pointers are included in the instance
			of
			`MotionEvent`
			which you receive in the
			`onTouch()`
			method.
		
		
			To track the
			touch events from multiple pointers you have to use the
			`MotionEvent.getActionIndex()`
			and the
			`MotionEvent.getActionMasked()`
			methods to identify the index of the pointer and the touch event
			which
			happened for this pointer.
		
		
			This pointer
			index can
			change over time, e.g. if one finger is lifted
			from the device. The stable version of a
			pointer is the
			_pointer id_
			,
			which can be determined with the
			`getPointerId(pointerIndex)`
			method from the
			`MotionEvent`
			object.
		
		The usage if demonstrated in the following code snippet.
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/multi/onTouch.java" />
			</programlisting>
		


		TIP:
			Multitouch can not be tested on the emulator. You need a real
				Android device as input device.
			
		</tip>
	

	<section id="touch_scaledetector">
		<title>GestureDetectors
		
			Android provide the
			`GestureDetector`
			class which allow to
			consume
			`MotionEvents`
			and to create
			higher level gesture
			events to listeners.
		
		
			For example the
			`ScaleGestureDetector`
			class allows to determine the
			predefined gesture of increasing and
			decreasing the size of the object via two fingers.
		
	



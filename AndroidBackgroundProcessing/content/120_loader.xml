<section id="loader">
	<title>Loader
	<section id="loader_definition">
		<title>Purpose of the Loader class
		
			The
			`Loader`
			class
			allow you to load data asynchronously in an activity or
			fragment. They can monitor the
			source of
			the
			data
			and
			deliver new results
			when the content
			changes. They
			also
			persist data
			between configuration
			changes.
		

		
			If the result is retrieved by the
			`Loader`
			after the object has been disconnected from its parent (activity or
			fragment), it can cache the data.
		
		
			Loaders
			have been introduced in Android 3.0 and are part of the
			compatibility
			layer for Android versions as of 1.6.
		
	
	<section id="loader_usage">
		<title>Implementing a Loader

		
			You can use the abstract
			`AsyncTaskLoader`
			class as the basis for your own
			_Loader_
			implementations.
		

		
			The
			`LoaderManager`
			of an activity or fragment manages one or more
			`Loader`
			instances.
			The creation of a
			_Loader_
			is done
			via the following method call.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/loader/init.java" />
			</programlisting>
		

		
			The first parameter is a
			unique ID which
			can
			be used by
			the callback
			class to identify that
			_Loader_
			later. The second parameter is a bundle which can be
			given
			to the
			callback class for more information.
		

		
			The third parameter of
			`initLoader()`
			is the class which is called once
			the
			initialization has been started
			(callback class). This class must implement the
			`LoaderManager.LoaderCallbacks`
			interface.
			It is good practice that
			an
			activity or the fragment
			which
			uses a
			_Loader_
			implements the
			`LoaderManager.LoaderCallbacks`
			interface.

		

		
			The
			`Loader`
			is not directly created by the
			`getLoaderManager().initLoader()`
			method call,
			but must be created by the callback class in the
			`onCreateLoader()`
			method.
		
		
			Once the
			`Loader`
			has finished reading data asynchronously, the
			`onLoadFinished()`
			method
			of the callback class is called. Here you can update your user
			interface.
		
	
	<section id="loader_cursorloader">
		<title>SQLite database and CursorLoader
		
			Android provides a
			`Loader`
			default implementation to handle SQlite database connections, the
			`CursorLoader`
			class.
		
		
			For a
			_ContentProvider_
			based on an
			_SQLite_
			database
			you would typically use the
			`CursorLoader`
			class. This
			_Loader_
			performs the database query in a background thread so that the
			application is not blocked.
		
		
			The
			`CursorLoader`
			class is the replacement for
			Activity-managed cursors which are
			deprecated now.
		

		
			If the
			`Cursor`
			becomes invalid, the
			`onLoaderReset()`
			method is called on the callback class.
		
	


<section id="concurrency_javathreads">
	<title>Using Java threading constructs in Android</title>
	<section id="concurrency_javathreads_using">
		<title>Using Java threads and thread pools </title>
		<para>
			Android
			supports the usage of the
			<code>Thread</code>
			class to perform asynchronous processing.
		</para>
		<para>
			Android also supplies the
			<code>java.util.concurrent</code>
			package
			to perform something in the background, e.g. using the
			<code>ThreadPools</code>
			and
			<code>Executor</code>
			classes.
		</para>
		<para>
			If
			you need to update the user interface from a new
			<code>Thread</code>
			, you need to synchronize with the
			<wordasword>user interface thread</wordasword>
			.
		</para>

	</section>
	<section id="concurrency_javathreads_disadvantages">
		<title>Disadvantages of using Java threads in Android</title>
		<para>
			If you use Java threading in Android applications, you have to handle the following
			requirements
			in your custom code:
			<itemizedlist>
				<listitem>
					<para>Synchronization with the main thread, if you post back results
						to the user interface
					</para>
				</listitem>
				<listitem>
					<para>No default for canceling the thread</para>
				</listitem>
				<listitem>
					<para>No default thread pooling</para>
				</listitem>
				<listitem>
					<para>No default for handling configuration changes in Android
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>Because of these restrictions, Android developer typically use Android specific code constructs. </para>
	</section>

</section>
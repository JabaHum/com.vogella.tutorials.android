<section id="widgetbroadcastreceiver" role="wrapper">
	<title>Creating the Broadcast receiver for the widget
	<section id="overview_register">
		<title>Create and configure widget
		
			To register a widget, you create a broadcast receiver
			with an intent
			filter for the
			`android.appwidget.action.APPWIDGET_UPDATE`
			action.
		
		
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/config/register.xml" />
			</programlisting>
		
		
			The receiver
			can get a label and icon assigned. These are used
			in the list
			of
			available widgets in the Android launcher.
		
		
			You also specify the meta-data for the widget
			via the
			`android:name="android.appwidget.provider`
			attribute. The configuration file referred by this
			metadata
			contains
			the configuration settings for the
			widget.
			It contains, for example, the
			update interface, the size and
			the
			initial layout of
			the widget.
		
		
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="../examples/config/widget_info.xml" />
			</programlisting>
		
	

	<section id="overview_views">
		<title>Available views and layouts
		
			A widget is restricted in the
			`View`
			classes it can use. As layouts you
			can
			use the
			`FrameLayout`,
			`LinearLayout`
			and
			`RelativeLayout`
			classes. As views you can use
			`AnalogClock`,
			`Button`,
			`Chromometer`,
			`ImageButton`,
			`ImageView`,
			`ProgressBar`
			and
			`TextView`.
		
		
			As of Android 3.0 more views are available:
			`GridView`,
			`ListView`,
			`StackView`,
			`ViewFlipper`
			and
			`AdapterViewFlipper`.
			These adapter
			views
			require that you define a
			_collection view widget_
			which is described later in this $book.
		
		
			The only interaction that is possible with the
			views
			of a
			widget
			is via
			an
			`OnClickListener` event.
			This
			`OnClickListener`
			can be registered on a widget and is triggered by the user.
		
	

	<section id="overview_appwidgetprovider">
		<title>AppWidgetProvider
		
			Your
			`BroadcastReceiver`
			implementation
			typically
			extends the
			`AppWidgetProvider`
			class.
		
		
			The
			`AppWidgetProvider`
			class implements the
			`onReceive()`
			method, extracts the required information and calls the
			following
			widget life cycle methods.
		
		
			As you can add several instances of a widget to the
			home screen,
			you have life cycle methods which are called only for the
			first
			instance added / removed to the home screen and others which are
			called for every instance of your widget.
		

		<table frame='all'>
			<title>Life cycle method
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
				<colspec colname='c1' colwidth="1*" />
				<colspec colname='c2' colwidth="3*" />
				<thead>
					<row>
						<entry>Method</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>`onEnabled()`</entry>
						<entry>
							Called the first time an instance of your widget is added
							to the home screen.
						</entry>
					</row>
					<row>
						<entry>`onDisabled()`</entry>
						<entry>
							Called once the last instance of your widget is removed
							from the home screen.
						</entry>
					</row>
					<row>
						<entry>`onUpdate()`</entry>
						<entry>
							Called for every update of the widget. Contains the ids of
							`appWidgetIds` for which an update is needed.
							Note that this may be
							all of the `AppWidget` instances for this
							provider, or just a subset
							of them, as stated in the method's
							JavaDoc. For example, if more
							than one widget is added to the home screen, only the
							last one
							changes (until reinstall).
						</entry>
					</row>
					<row>
						<entry>`onDeleted()`</entry>
						<entry>Widget instance is removed from the home screen.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	

	<section id="overview_appwidgetprovider_async">
		<title>Receiver and asynchronous processing

		
			A widget has the same runtime restrictions as a normal
			broadcast
			receiver, i.e., it has only 5 seconds to finish its processing.
		
		
			A
			receive (widget)
			should therefore perform
			time consuming
			operations
			in a service
			and perform the update of
			the
			widgets
			from
			the
			service.
		
	


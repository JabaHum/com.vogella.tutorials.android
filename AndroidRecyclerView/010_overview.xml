<section id="androidlists" role="wrapper">
	<title>Android and list or grids
	<section id="recyclerview_overview">
		<title>Using lists or grids in Android
		
			The display of elements in a list or grids is a very common
			pattern in
			mobile
			applications. This description uses the
			term
			_list_
			but this description is also valid for grids or other structured representations of data.
		
		
			The user sees a collection of items and can
			scroll
			through
			them. Such an
			activity is depicted in the following
			picture.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/listview_scheme10.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>Listview example</phrase>
				</textobject>
			</mediaobject>
		
		
			Typically the user interacts with the list via a toolbar, swipe gestures or clicks.
			Individual list items can
			be
			selected. This selection can
			update
			the
			toolbar or
			can
			trigger a
			detailed screen for the selection. The
			following graphic
			sketches
			that. On the selection
			of a list item
			another activity can be started.
		

		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/listview_scheme20.png" scale="30" />
				</imageobject>
				<textobject>
					<phrase>Listview example</phrase>
				</textobject>
			</mediaobject>
		
	</section>
	<section id="recyclerview_possibleview">
		<title>Using RecyclerView 

		
			The
			`RecyclerView`
			class, delivered as part of the v7 support library suite,
			is an
			improved
			version of the
			`ListView`
			and the
			`GridView`
			classes provided by the Android framework.
		
		
			What does improved version mean?
			`RecyclerView`
			addresses several issues that
			`ListView`
			has, it comes with default animations for removing and adding
			elements and it recycles views directly.
		
		
			`RecyclerView`
			provides layout managers for positioning items and default animations
			for common item operations like removal and
			additions of items.

		
	</section>
	<section id="adapterperformance_viewholder">
		<title>Using a view holder
		

		
		
			Recyler view uses a
			`ViewHolder`
			to store references to the views for one entry in the recyler view. A
			`ViewHolder`
			class is typically a static inner class in your adapter which holds
			references
			to
			the relevant views. With these
			references your code can
			avoid the
			`findViewById()`
			method in an adapter to find the views which should be filled with your new data.
		
		
			While this sounds complex, this is approximately 15 % faster then
			using the
			`findViewById()`
			method.
		
	</section>


	<section id="recyclerview_adapterintro">
		<title>Adapters
		
			An
			_adapter_
			manages the data model and adapts it to the individual entries in the widget. An adapter for recyler view extends the
			`RecyclerView.Adapter`
			class.
		
		
			Every entry in a recycler view consists of a view hierarchy filled with the data model. A typical line in a list
			has an image
			on the
			left side and two text lines in the middle as depicted in the
			following graphic.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/listview_line10.png"/>
				</imageobject>
				<textobject>
					<phrase>Recyler view example layout</phrase>
				</textobject>
			</mediaobject>
		
		
			A layout file for a such a line might look like the following.
		
		
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/snippets/rowlayout_complex.xml" />
			</programlisting>
		

		
			The adapter is responsible for inflating the layout for each entry in recycler view. It returns an object of type
			`ViewHolder`
			per visual entry in the recycler view.
		
		
			The adapter must return the number of items via its
			`getItemCount()`
			method.
			Each entry in the
			`RecylerView`
			widget displays specific data for the data model. The adapter
			inflates a corresponding layout file and assigns the
			data to the
			inflated layout.
		

		
			The
			`onCreateViewHolder`
			method
			inflate
			the
			layout and creates an instance of the
			`ViewHolder`
			class. This instance is used to access the views in the inflated
			layout. The
			`onCreateViewHolder`
			method
			is only
			called then a new view must be created.
		

		


			The
			`onBindViewHolder`
			method binds the In this method you
			assign the data to the individual
			views in the row.
			data to the view.
		
		

		
		
			The adapter is assigned to the
			`RecylerView`
			via the
			`setAdapter`
			method on the
			`RecylerView`
			object.
		
	</section>

	<section id="recyclerview_inputtype">
		<title>Possible input types for the adapter
		
			The input to the adapter of
			`RecyclerView`
			can be any
			arbitrary Java
			objects. The
			`RecyclerView`
			adapter extracts the correct data from the data
			object
			and assigns
			this
			data to the individual items in the list or grid
			represented by the
			`RecyclerView`
			implementation.
		

	</section>

	<section id="recycleview_defaultimplementations">
		<title>Default layout manager
		
			The layout manager decides how the data in the
			`RecyclerView`
			is displayed. The support library for recyler view
			provides the following build-in layout managers.

			<itemizedlist>
				<listitem>
					LinearLayoutManager shows items in a vertical or horizontal
						scrolling list.
					
				</listitem>
				<listitem>
					GridLayoutManager shows items in a grid.
				</listitem>
				<listitem>
					StaggeredGridLayoutManager shows items in a staggered grid.
					
				</listitem>
			</itemizedlist>
		

	</section>

</section>
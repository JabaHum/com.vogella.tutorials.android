<section id="firstandroidapp_layout" role="wrapper">
	<title>Exercise: Use layouts and view interaction
	<section id="firstandroidapp_layoutreview">
		<title>Target of this exercise
		
			In this exercise you learn how to interact between your user interface widgets using data binding.
			You continue to use
			the application
			you created in
			<xref linkend="androidstudio_starter" />
			.
		
	</section>

	<section id="firstandroidapp_handlers">
		<title>Create handler for the view interaction
		Create the following class which is later assigned to your button.
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/exercise_layoutbutton/MainActivityHandlers.java" />
			</programlisting>
		
	</section>

	<section id="firstandroidapp_activatedatabinding">
		<title>Activate the usage of data binding
		
			Open your
			<filename>app/build.gradle</filename>
			file and activate the usage of databinding. Ensure you pick the correct build file, it is the one with the
			`application`
			node in it.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/exercise_layoutbutton/build.gradle" />
			</programlisting>
		
	</section>

	<section id="firstandroidapp_layoutremoveviews">
		<title>Adjust layout files to use data binding
		
			Open the
			<filename>activity_main.xml</filename>
			layout file in the
			<filename class="directory">res/layout</filename>
			folder.
			Investigate the XML layout in the visual editor as well in as
			the
			XML
			structure.
			Remove all views, except the top
			level entry which is the layout
			manager.
			Afterwards prepare you layout file for the usage of data binding. The result
			layout file should look
			similar to
			the following
			file.
		

		
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/exercise_layoutbutton/activity_main.xml" />
			</programlisting>
		

		
			Add an
			`Plain Text`
			(EditText)
			and
			a
			`Button`
			to your layout.
			Use the text (XML) editor to change the ID of the new
			`EditText`
			field to
			<property>main_input</property>
			. In the XML file this looks like
			`@+id/main_input`
			.
		

		
			Change the button text to
			_Start_
			via the
			`android:text`
			property in your layout file.
			Assign the
			`android:onClick`
			property of your
			`Button`
			to your handler via data binding.
		

		After these changes your layout file should be similar to the
			following code.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/exercise_layoutbutton/solution_activity_main.xml" />
			</programlisting>
		
		<note>
			
				You see some warning messages in the editor, e.g., because you
				used
				hard-codes strings.
				<xref linkend="androidtesting_unittest_exerciseprep" />
				demonstrates later how to get rid of these warning messages.
			
		</note>

		
			Adjust your
			`MainActivity`
			code to activate data binding.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/exercise_layoutbutton/solution_MainActivity.java" />
			</programlisting>
		

	</section>
	<section id="firstandroidapp_layoutvalidation">
		<title>Validate your application
		 You can start your application in the emulator or use the
			layout review in your IDE. If you press the button, a
			small popup should be shown.
			Ensure that the text from your EditText field is displayed.
		

		
			The result
			should
			look similar to the
			following screenshot.
		

		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/exercise_firstlayout10.png" />
				</imageobject>
			</mediaobject>
		
	</section>

</section>

<section id="volly">
	<title>Volley
	<section id="vollywhatis">
		<title>What is volley?

		Volley is an HTTP library that makes networking for Android
			applications easier and faster.

		
		 To use Volley in your Android application you need to clone the
			Git repository and import the download as Android library project.
		
		
			<programlisting language="bourne">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/volley/download.txt" />
			</programlisting>
		
		Volley supports out of the box raw strings, images, and JSON but
			can get extended with additional protocols. Volley does NOT support
			the download of large file or streaming operations, as it holds all
			responses in memory during its processing.
		
		Volley always delivers parsed responses on the main thread; the
			developer does not need to synchronize with the main thread to
			update the user interface.
		
	
	<section id="vollysendingarequest">
		<title>Sending a request with volley
		
			To send a request you create a
			`RequestQueue`
			, for example the default one with
			`Volley.newRequestQueue(this)`
			and add a
			`RequestObject`
			to it via the
			`add`
			method.
		
		Volley keeps a cache processing thread and first checks if the
			request can be
			fulfilled from the cache, if not it is placed on the
			network queue.
			Volley has worker threads for the network, the first
			available
			network thread takes the request from the queue,
			performs the
			HTTP
			transaction, parse the response, writes the
			response to the cache,
			and posts the parsed response
			back to the main
			thread.
		

	

	<section id="volly_cancekrequest">
		<title>Cancel a request with volley
		
			To cancel a request, call the
			`cancel()`
			method on the
			`Request`
			object. After this call, the response handler is not called.
		
		
			As good practice cancel all your pending requests in the
			`onStock()`
			method via the
			`requestQueue.cancelAll(TAG)`
			call whereby your can assign the tag to a request via the
			`setTag(tag)`
			method on the
			`Request`
			object.
		
	


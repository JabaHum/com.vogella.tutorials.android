<section id="animations" role="wrapper">
	<title>Android Animations
	<section id="animations_overview">
		<title>Using animations
		
			Android 3.0 introduced the
			_Properties Animation API_
			which allow to change object properties over a predefined
			time
			interval.
		
		
			The API allows to define for arbitrary object
			properties a start and
			end value and apply a time-based change to
			this attribute. This API
			can be applied on any Java object not only on
			`Views`
			.
		
	
	<section id="animations_animator">
		<title>Animator and AnimatorListener
		
			The superclass of the animation API is the
			`Animator`
			class. Typically the
			`ObjectAnimator`
			class is used to modify the attributes of an object.
		
		
			You can also add an
			`AnimatorListener`
			class to your
			`Animator`
			class. This listener is called in the different phases of the
			animation. You can use this listener to perform actions before or
			after a certain animation, e.g. add or remove a
			`View`
			from a
			`ViewGroup`
			.
		
	



	<section id="animations_viewpropertyanimator">
		<title>ViewPropertyAnimator
		
			The
			`ViewPropertyAnimator`
			class introduced in Android 3.1 provides a simpler access to typical
			animations which are performed on
			views.
		
		
			The
			`animate()`
			method on a
			view
			returns the
			`ViewPropertyAnimator`
			object. This object allows
			to perform simultaneous animations. It
			has a
			fluent API and allows
			setting
			the duration of the animation.
		
		
			The target of
			`ViewPropertyAnimator`
			is to provide a very simple API for typical animations.
		
		The following code shows an example of the usage of this method.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/viewproperty/Test.java" />
			</programlisting>
		

		
			For performance optimization you can also let
			`ViewPropertyAnimator`
			use a hardware layout.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/viewproperty/TestHardware.java" />
			</programlisting>
		
		
			You can also directly define a
			`Runnable`
			to be executed at the start and the end of the animation.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/viewproperty/TestLayoutActions.java" />
			</programlisting>
		
		
			The
			`setInterpolator()`
			allows to define an object of type
			`TimeInterpolator`
			which defines the change of the value over time. The standard is
			linear. The Android platform
			defines a few default ones as for example
			`AccelerateDecelerateInterpolator`
			where the rate of change starts and ends slowly but accelerates
			through the middle.
		
		
			Via the
			`setEvaluator`
			method you can set an object of type
			`TypeEvaluator`
			which allow you to create animations on arbitrary property
			types, by
			providing custom evaluators for types that
			are not automatically
			understood and used by the animation system.
		


	


	<section id="animations_layoutanimation">
		<title>Layout animations
		
			The
			`LayoutTransition`
			class allows setting animations on a layout container and a change on
			the
			view hierarchy
			of this container will be animated.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/layout/LayoutAnimations.java" />
			</programlisting>
		
	

	<section id="animations_activityanimations">
		<title>Animations for Activity transition
		
			Animations can be applied to
			`Views`
			but it is also possible to apply them on the transition between
			activities.
		
		
			The
			`ActivityOptions`
			class
			allows defining defaults or customer animations.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/activities/ActivityAnimation.java" />
			</programlisting>
		


	


<section id="exercise_lifecycle" role="wrapper">
	<title>Exercise: Lifecycle
	<section id="exercise_lifecycle1">
		<title>Target of this exercise
		In this exercise you create an application which allows you to
			observe the life cycle call of the Android system to your Android
			application.
		
	
	<section id="exercise_lifecycle2">
		<title>Create project
		
			Create a new project called
			_com.vogella.android.lifecycle.activity_
			.
		
		Create the following class which is used to report lifecycle
			events via notifications.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/report/TracerActivity.java" />
			</programlisting>
		

	
	<section id="exercise_lifecycle3">
		<title>Create your activities
		
			Create two activities which extend this one. The first activity
			should
			allow to start the second one via an
			`Intent`
			.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/report/MainActivity.java" />
			</programlisting>
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/report/SecondActivity.java" />
			</programlisting>
		

		<warning>
			Ensure that both activities are registered in the Android
				manifest.
			
		</warning>

	
	<section id="exercise_lifecycle4">
		<title>Testing
		Start your application and trigger the second activity. Review
			the notifications and ensure you know why this order of things are
			happening.
		
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/activity_lifecycle20.png"
						scale="40" />
				</imageobject>
				<textobject>
					<phrase>Notifications about the lifecycle</phrase>
				</textobject>
			</mediaobject>
		

		
			Press the Back button on the second activity. Validate that
			`onSaveInstanceState()`
			is not
			called. Explain why it is not called.
		
		
			Press the home button on the second activity. Validate that
			`onSaveInstanceState()`
			is called. Explain why it is called.
		
		Start the second activity. Switch the orientation of your
			emulator via the CTRL+F11
			shortcut and see which lifecycle methods of
			the activity are called. Is the first activity also re-created or
			only the second one?
		
		
			Activate the
			<guilabel>Don't keep activities</guilabel>
			setting in the
			_Developer Options_
			. Test again which methods are called.
		
	
	<section id="exercise_lifecycle5">
		<title>Instance state
		
			Create a string array and add a
			`Spinner`
			view to your first
			activity using
			this array. The following lists the
			_strings.xml_
			and the layout file used by the first activity.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/report/strings.xml" />
			</programlisting>
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/report/activity_main.xml" />
			</programlisting>
		


		Android restores the state of a spinner automatically . Ensure
			that the
			selection of the spinner is saved and restored
			between
			configuration
			changes or restarts of the activity by the
			Android
			system.
		
		
			Remove now the fixed array assignment in the layout and assign it to
			the
			`Spinner`
			via source code.
			.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/spinner/SpinnerConfig.java" />
			</programlisting>
		
		Remove the fixed assignment in your layout file.
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/report/activity_main2.xml" />
			</programlisting>
		
		Validate that in this case the position in the spinner is still
			automatically
			restored.
		


	




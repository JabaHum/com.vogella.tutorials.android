<section id="databasetutorial" role="wrapper">
	<title>Tutorial: Using SQLite
	<section id="databasetutorial_intro">
		<title>Introduction to the project
		
	The following demonstrates how to work with an SQLite
	database.
	We will use a data access object (DAO) to manage the data
	for us. The
	DAO is responsible for handling the database connection and
	for
	accessing and modifying the data. It will also convert the
	database
	objects into real Java Objects, so that our user interface
	code does
	not
	have to deal with the persistence layer.
		
		 The resulting application will look like the following.
		
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/dbexample10.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase></phrase>
				</textobject>
			</mediaobject>
		
		
			Using a DAO is not always the right approach. A DAO
			creates
			Java model
			objects; using a database directly or via a
			`ContentProvider`
			is typically more resource efficient as you can avoid the creation of
			model objects.
		
		
			I still demonstrate the usage of the DAO in this example to have a
			relatively
			simple
			example to begin with. Use the latest version of
			Android 4.0. This is currently API Level 15. Otherwise I would have
			to
			introduce the
			`Loader`
			class, which should be used as of Android 3.0 for managing a database
			`Cursor`
			. And this class
			introduces additional
			complexity.
		

	
	<section id="databasetutorial_project">
		<title>Create Project
		
			Create the new Android project with the name
			`de.vogella.android.sqlite.first`
			and an
			_activity_
			called
			_TestDatabaseActivity_.
		
	
	<section id="databasetutorial_database">
		<title>Database and Data Model
		
			Create the
			`MySQLiteHelper`
			class. This class is responsible for creating the database. The
			`onUpgrade()`
			method will simply delete all existing data and re-create the
			table.
			It also defines several constants for the table name and
			the table
			columns.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/simpledb/MySQLiteHelper.java" />
			</programlisting>
		
		
			Create the
			`Comment`
			class. This class is our model and contains the data we will save in
			the database and show in the user interface.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/simpledb/Comment.java" />
			</programlisting>
		

		
			Create the
			`CommentsDataSource`
			class. This class is our DAO. It maintains the database connection
			and
			supports
			adding new comments and fetching all comments.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/simpledb/CommentsDataSource.java" />
			</programlisting>
		

	

	<section id="databasetutorial_ui">
		<title>User Interface
		
			Change your _main.xml_ layout file  in the <filename class="directory">res/layout_ folder to the
			following. This layout has two buttons for adding and deleting
			comments
			and a
			`ListView`
			which will be used to display the existing comments. The comment
			text
			will be generated later in the
			_activity_
			by a small random generator.
		

		
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/simpledb/main.xml" />
			</programlisting>
		


		
			Change your
			`TestDatabaseActivity`
			class.
			to the following. We use here a ListActivity for displaying the
			data.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/simpledb/TestDatabaseActivity.java" />
			</programlisting>
		

	

	<section id="databasetutorial_run">
		<title>Running the apps
		 Install your application and use the _Add_ and _Delete_ button.
			Restart your application to validate that the data is still there.
		
	

<section id="todo" role="wrapper">
	<title>Tutorial: SQLite, custom ContentProvider and Loader</title>
	<section id="todo_intro">
		<title>Overview</title>
		<para>
			The following demo is also available in the Android Market. To allow
			more users to play with the app, it has been downported to Android
			2.3.
			If you have a barcode scanner installed on your Android phone,
			you can
			scan the following QR Code to go to the example app in the
			Android
			market. Please note that the app looks and behaves differently
			due to
			the different Android versions, e.g. you have an
			<code>OptionMenu</code>
			instead of the
			<wordasword>ActionBar</wordasword>
			and the theme is different.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/AndroidTodoQRCode.png"/>
				</imageobject>
				<textobject>
					<phrase></phrase>
				</textobject>
			</mediaobject>
		</para>
		<para>
			We will create a "To-do" application which
			allows
			the user to enter
			tasks
			for himself. These items
			will be
			stored in the
			SQLite
			database and
			accessed via a
			<code>ContentProvider</code>
			.
		</para>
		<para>The tasks are called "todo items" or "todos" in this tutorial.
		</para>
		<para>
			The application consists
			out of
			two
			<wordasword>activities</wordasword>
			, one for
			seeing a list of all todo items and
			one for
			creating and
			changing a
			specific todo item. Both
			<wordasword>activities</wordasword>
			will
			communicate via
			<wordasword>Intents</wordasword>
			.
		</para>
		<para>
			To asynchronously load and manage the
			<code>Cursor</code>
			the main
			<wordasword>activity</wordasword>
			will use a
			<code>Loader</code>
			.
		</para>
		<para> The resulting application will look similar to the following.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/database1.png"/>
				</imageobject>
				<textobject>
					<phrase>Todo Example application OverviewActivity</phrase>
				</textobject>
			</mediaobject>
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/database2.png" scale="40"/>
				</imageobject>
				<textobject>
					<phrase>Todo Example application DetailsActivity</phrase>
				</textobject>
			</mediaobject>
		</para>


	</section>

	<section id="todo_project">
		<title>Project</title>
		<para>
			Create the project
			<code>de.vogella.android.todos</code>
			with the
			<wordasword>activity</wordasword>
			called
			<code>TodosOverviewActivity</code>
			. Create another
			<wordasword>activity</wordasword>
			called
			<code>TodoDetailActivity</code>
			.
		</para>

	</section>



	<section id="todo_database">
		<title>Database classes</title>
		<para>
			Create the
			package
			<code>de.vogella.android.todos.database</code>
			.
			This package
			will store
			the
			classes for the database
			handling.
		</para>
		<para>
			As said earlier I consider having one separate class per table
			as
			best practice. Even though we have only one table in this example
			we
			will follow this practice. This way we are prepared in case our
			database schema grows.
		</para>
		<para>
			Create the following class. This class also contains constants
			for the
			table name and the columns.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/database/TodoTable.java" />
			</programlisting>
		</para>
		<para>
			Create the following
			<code>TodoDatabaseHelper</code>
			class. This class extends
			<code>SQLiteOpenHelper</code>
			and calls the static methods of the
			<code>TodoTable</code>
			helper class.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/database/TodoDatabaseHelper.java" />
			</programlisting>
		</para>
		<para>
			We will use a
			<code>ContentProvider</code>
			for accessing the database; we will not write a data access object
			(DAO) as we did in the previous SQlite example.
		</para>
	</section>
	<section id="todo_contentprovider">
		<title>Create ContentProvider</title>
		<para>
			Create the package
			<code>de.vogella.android.todos.contentprovider</code>
			.
		</para>
		<para>
			Create the following
			<code>MyTodoContentProvider</code>
			class which extends
			<code>ContentProvider</code>
			.
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/todo/MyTodoContentProvider.java" />
			</programlisting>
		</para>


		<para>

			<code>MyTodoContentProvider</code>
			implements
			<code>update()</code>
			,
			<code>insert()</code>
			,
			<code>delete()</code>
			and
			<code>query()</code>
			methods. These methods map more or less directly to the
			<code>SQLiteDatabase</code>
			interface.
		</para>
		<para>
			It also has the
			<code>checkColumns()</code>
			method to validate that a query only requests valid columns.
		</para>
		<para>
			Register your
			<code>ContentProvider</code>
			in your
			AndroidManifest.xml file.
		</para>
		
		<para>
			<programlisting language="xml">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/todo/AndroidManifestCP.xml" />
			</programlisting>
		</para>

	</section>

	<section id="todo_resources">
		<title>Resources</title>

		<para>
			Our application requires several resources.
			First define a menu
			<code>listmenu.xml
			</code>
			in the folder
			<code>res/menu</code>
			. If you use the Android resource wizard to create the "listmenu.xml"
			file, the folder will be created
			for you; if you create the file
			manually you also need to create the
			folder manually.
		</para>
		<para>
			This XML file will be used to define the option menu in our
			application. The
			<code>android:showAsAction="always"</code>
			attribute will ensure that this menu entry is displayed in the
			<wordasword>ActionBar</wordasword>
			of our application.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/resources/listmenu.xml" />
			</programlisting>
		</para>
		<para>
			The user will be able to select the priority for the todo items. For
			the priorities we create a string array. Create the
			following file
			<code>priority.xml</code>
			in the
			<code>res/values</code>
			folder
			.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/resources/priority.xml" />
			</programlisting>
		</para>
		<para>
			Define also additional strings for the
			application.
			Edit
			<code>strings.xml</code>
			under
			<code>res/values</code>
			.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/resources/strings.xml" />
			</programlisting>
		</para>

	</section>

	<section id="todo_layout">
		<title>Layouts</title>
		<para>
			We will define three layouts. One will be used for the display of a
			row
			in the list, the other ones will be used by our
			<wordasword>activities</wordasword>
			.
		</para>

		<para>
			The row layout refers to an icon called <wordasword>reminder</wordasword>.
			Paste an icon of
			type "png" called
			"reminder.png"
			into your
			<code>res/drawable</code>
			folders (
			<code>drawable-hdpi</code>
			,
			<code>drawable-mdpi</code>
			,
			<code>drawable-ldpi</code>
			)
		</para>
		<para>If you do not have an icon
			available you can copy the icon created
			by the Android wizard
			(ic_launcher.png in the res/drawable* folders)
			or
			rename the reference in the layout file. Please note that the
			Android Developer Tools sometimes change the name of this generated
			icon , so your file might not be called
			"ic_launcher.png".
		</para>
		<para>
			Alternatively you could
			remove the
			icon definition
			from
			the
			"todo_row.xml" layout definition
			file which you will create in
			the
			next
			step.
		</para>

		<para>
			Create the
			"todo_row.xml" layout file
			in the folder
			<filename class="directory">res/layout</filename>.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/layout/todo_row.xml" />
			</programlisting>
		</para>

		<para>
			Create the
			<code>todo_list.xml</code>
			layout file. This layout
			defines how
			the list looks like.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/layout/todo_list.xml" />
			</programlisting>
		</para>


		<para>
			Create the
			<code>todo_edit.xml</code>
			layout file. This layout will be used
			to display and edit an
			individual
			todo item
			in the
			<code>TodoDetailActivity</code>
			<wordasword>activity</wordasword>
			.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/layout/todo_edit.xml" />
			</programlisting>
		</para>

	</section>

	<section id="todo_activities">
		<title>Activities</title>
		<para>
			Change the coding of your activities to the following.
			First
			<code>TodosOverviewActivity.java</code>
			.
		</para>
		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/todo/TodosOverviewActivity.java" />
			</programlisting>

		</para>
		<para>
			And
			<code>TodoDetailActivity.java</code>
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/todo/TodoDetailActivity.java" />
			</programlisting>
		</para>

		<para>
			The resulting
			<code>AndroidManifest.xml</code>
			looks like the following.
		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/todo/AndroidManifest.xml" />
			</programlisting>
		</para>
		<para>Please note
			that <![CDATA[android:windowSoftInputMode="stateVisible|adjustResize"]]>
			is defined for the
			<code>TodoDetailActivity</code>
			. This makes the keyboard harmonize better with the widgets, but it
			is
			not required for this tutorial.
		</para>
	</section>


	<section id="todo_run">
		<title>Start your application</title>
		<para> Start your application. You should be able to enter a new
			todo
			item
			via the "Insert" button in the ActionBar.
		</para>

		<para>
			An existing todo item can be deleted on the list via a
			long
			press.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/todo2.png" scale="60" />
				</imageobject>
				<textobject>
					<phrase>Deleting an todo item</phrase>
				</textobject>
			</mediaobject>
		</para>
		<para>
			To change an existing todo item, touch the corresponding row. This
			starts the second
			<wordasword>activity</wordasword>
			.
		</para>
	</section>

</section>
<section id="sqliteoverview" role="wrapper">
	<title>SQLite architecture
	<section id="sqliteoverview_packages">
		<title>Packages
		
			The
			`android.database`
			package
			contains all necessary classes for working with databases.
			The
			`android.database.sqlite`
			package
			contains the SQLite specific classes.
		
	

	<section id="sqliteoverview_sqliteopenhelper">
		<title>Creating and updating database with SQLiteOpenHelper
		
			To create and upgrade a database in your Android application you
			create a
			subclass of the
			`SQLiteOpenHelper`
			class.
			In the constructor of your subclass you
			call the
			`super()`
			method of
			`SQLiteOpenHelper`
			,
			specifying the database name and the current database version.
		
		
			In this class you need to
			override the following methods to create and
			update your database.

			<itemizedlist>
				<listitem>
					
						`onCreate()`
						-
						is called by the framework, if the database is accessed but not
						yet created.
					
				</listitem>
				<listitem>
					
						`onUpgrade()`
						-
						called, if the database version is increased in your application
						code.
						This method allows you to update an existing
						database
						schema or
						to drop the existing database and recreate it via the
						`onCreate()`
						method.
					
				</listitem>

			</itemizedlist>

		
		
			Both methods receive an
			`SQLiteDatabase`
			object as parameter which is the Java representation of the
			database.
		

		
			The
			`SQLiteOpenHelper`
			class
			provides the
			`getReadableDatabase()`
			and
			`getWriteableDatabase()`
			methods
			to get access to an
			`SQLiteDatabase`
			object; either in read
			or
			write mode.
		
		
			The database tables should use the
			identifier
			`_id`
			for the primary key of the table.
			Several Android functions rely on
			this standard.
		
		TIP:

			
				It is good practice to create a separate class per table. This class
				defines
				static
				`onCreate()`
				and
				`onUpgrade()`
				methods. These methods are called in the corresponding methods
				of
				`SQLiteOpenHelper`
				. This way your implementation of
				`SQLiteOpenHelper`
				stays readable, even if you have several tables.
			
		</tip>
	



	<section id="sqliteoverview_sqlitedatabase">
		<title>SQLiteDatabase
		
			`SQLiteDatabase`
			is the base class for working with a
			SQLite
			database in Android and
			provides methods to open, query, update and
			close the database.
		
		
			More specifically
			`SQLiteDatabase`
			provides the

			`insert()`
			,
			`update()`
			and
			`delete()`
			methods.
		
		
			In addition it provides the
			`execSQL()`
			method, which allows to
			execute an SQL statement directly.
		
		
			The object
			`ContentValues`
			allows to define key/values. The
			`key`
			represents the table column
			identifier
			and the
			`value`
			represents the
			content for the table
			record
			in this column.
			`ContentValues`
			can be used for inserts and
			updates of database entries.
		
		
			Queries can be created via the
			`rawQuery()`
			and
			`query()`
			methods
			or via the
			`SQLiteQueryBuilder`
			class
			.
		
		
			`rawQuery()`
			directly
			accepts an SQL select statement as input.
		
		
			`query()`
			provides a structured interface for specifying
			the SQL query.
		
		
			`SQLiteQueryBuilder`
			is a convenience class that helps to build SQL queries.
		

	
	<section id="sqliteoverview_rawquery">
		<title>rawQuery() Example

		
			The following gives an example of a
			`rawQuery()`
			call.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/intro/rawquery.txt" />
			</programlisting>
		
	
	<section id="sqliteoverview_query">
		<title>query() Example
		
			The following gives an example of a
			`query()`
			call.
		
		
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/intro/query.txt" />
			</programlisting>
		
		
			The method
			`query()`
			has the following parameters.


			<table frame='all'>
				<title>Parameters of the query() method
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' colwidth="1*" />
					<colspec colname='c2' colwidth="3*" />
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Comment</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>String dbName</entry>
							<entry>The table name to compile the query against.</entry>
						</row>
						<row>
							<entry>String[] columnNames</entry>
							<entry>A list of which table columns to return. Passing "null"
								will return all columns.
							</entry>
						</row>
						<row>
							<entry>String whereClause</entry>
							<entry>Where-clause, i.e. filter for the selection of data, null
								will select all data.
							</entry>
						</row>
						<row>
							<entry>String[] selectionArgs</entry>
							<entry>You may include ?s in the "whereClause"". These
								placeholders will get
								replaced by the values from the
								selectionArgs array.
							</entry>
						</row>
						<row>
							<entry>String[] groupBy</entry>
							<entry>A filter declaring how to group rows, null will cause the
								rows to not be grouped.
							</entry>
						</row>
						<row>
							<entry>String[] having</entry>
							<entry>Filter for the groups, null means no filter.
							</entry>
						</row>
						<row>
							<entry>String[] orderBy</entry>
							<entry>Table columns which will be used to order the data, null
								means no
								ordering.
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>

		
		
			If a condition is not required you can pass
			`null`
			, e.g. for the group by
			clause.
		
		
			The
			"whereClause"
			is specified without the word
			"where", for
			example a "where" statement might look like:
			"_id=19 and summary=?".
		
		
			If you specify placeholder values in the where clause via
			`?`
			,
			you pass
			them as the
			selectionArgs parameter to the query.
		


	



	<section id="sqliteoverview_cursor">
		<title>Cursor
		
			A
			query
			returns a
			`Cursor`
			object. A Cursor represents the result of a query and basically
			points
			to one row of the query result. This way Android can buffer the
			query results efficiently; as it does not have to load all data into
			memory.
		

		
			To get the number of
			elements of the resulting query use the
			`getCount()`
			method.
		

		
			To move between individual data
			rows, you can use the
			`moveToFirst()`
			and
			`moveToNext()`
			methods. The

			`isAfterLast()`
			method allows to check if the end of the query result has been
			reached.
		
		

			`Cursor`
			provides typed
			`get*()`
			methods, e.g.
			`getLong(columnIndex)`
			,
			`getString(columnIndex)`
			to access the column data for the current position of the result.
			The
			"columnIndex" is the number of the column you are
			accessing.
		
		
			`Cursor`
			also provides the
			`getColumnIndexOrThrow(String)`
			method which allows to get the column index for a column name of the
			table.
		
		
			A
			`Cursor`
			needs to be closed with the
			`close()`
			method call.
		

	

	<section id="sqliteoverview_listviews">
		<title>ListViews, ListActivities and SimpleCursorAdapter
		
			`ListViews`
			are
			`Views`
			which allow to display a list of elements.
		
		
			`ListActivities`
			are specialized
			_activities_
			which make the usage of
			`ListViews`
			easier.
		
		
			To work with databases and
			`ListViews`
			you can use the
			`SimpleCursorAdapter`
			. The
			`SimpleCursorAdapter`
			allows to set a layout for each row of the
			`ListViews`
			.
		
		
			You also define an array which contains the column names and another
			array which contains the IDs of
			`Views`
			which should be filled with the data.
		
		
			The
			`SimpleCursorAdapter`
			class will map the columns to the
			`Views`
			based on the
			`Cursor`
			passed to it.
		
		
			To obtain the
			`Cursor`
			you should use the
			`Loader`
			class.
		

	


